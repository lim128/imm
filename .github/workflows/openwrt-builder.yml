name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: "openwrt-24.10"
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检出代码
      uses: actions/checkout@main

    - name: 释放磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 克隆软件包
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt
        git clone -b beta --single-branch https://github.com/rufengsuixing/luci-app-adguardhome.git package/luci-app-adguardhome
        git clone -b v5 --single-branch https://github.com/sbwml/openwrt_helloworld.git package/helloworld && rm -rf package/helloworld/luci-app-homeproxy
        git clone -b v5 --single-branch https://github.com/sbwml/luci-app-mosdns.git package/luci-app-mosdns
        git clone -b main --single-branch https://github.com/sbwml/luci-app-openlist2.git package/luci-app-openlist2

    - name: 更新软件源
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 删除相关包
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        sed -i 's/192.168.1.1/192.168.123.1/g' package/base-files/files/bin/config_generate
        rm -rf feeds/{luci,packages}/{applications,lang,net}/{luci-app-openlist,luci-app-openclash,luci-app-passwall,luci-app-daed,golang,chinadns-ng,daed,dns2socks-rust,dns2socks,dns2tcp,geoview,hysteria,ipt2socks,lua-neturl,microsocks,mosdns,naiveproxy,nikki,openlist,pdnsd,redsocks2,shadow-tls,shadowsocks-libev,shadowsocks-rust,shadowsocksr-libev,simple-obfs,sing-box,tcping,trojan-plus,trojan,tuic-client,v2ray-core,v2ray-geodata,v2ray-plugin,xray-core,xray-plugin}
        git clone -b 25.x --single-branch https://github.com/sbwml/packages_lang_golang.git feeds/packages/lang/golang
        ./scripts/feeds update -a && ./scripts/feeds install -a
        
    - name: 下载依赖包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 整理和压缩文件
      id: organize
      if: ${{ !cancelled() }}
      run: |
        df -hT $PWD
        cd openwrt
        (cd bin/packages/aarch64_generic && tar -czf ../../../app.tar.gz *)
        (cd bin/targets/rockchip/armv8 && tar -czf packages.tar.gz packages && rm -rf packages)
        echo "PACKAGES_FILE=$PWD/app.tar.gz" >> $GITHUB_ENV
        echo "FIRMWARE_DIR=$PWD/bin/targets/rockchip/armv8" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成标签和信息
      id: tag
      if: ${{ env.UPLOAD_RELEASE == 'true' && !cancelled() }}
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        cat > release.txt << 'EOF'
        - 设备: r3s
        - 源码: ${{ env.REPO_URL }}
        - 分支: ${{ env.REPO_BRANCH }}
        - **app.tar.gz**: aarch64_generic架构软件包
        - **packages.tar.gz**: 固件相关软件包
        EOF
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传到 release
      uses: softprops/action-gh-release@master
      if: ${{ steps.tag.outputs.status == 'success' && !cancelled() }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ${{ env.PACKAGES_FILE }}
          ${{ env.FIRMWARE_DIR }}/*

    - name: 删除旧工作流
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 1

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 2
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
